name: CI-CD
on:
  push:
    branches: [main]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: kubsu
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U kubsu"
          --health-interval 15s
          --health-timeout 10s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U kubsu; do
            echo "Waiting for PostgreSQL..."
            sleep 3
          done

      - name: Build Docker images
        run: |
          docker build -t myapp:test .
          docker build --target builder -t myapp:builder .
          docker build -t myapp:final .

      - name: Run tests
        run: |
          docker run --rm \
            --network host \
            -e PYTHONPATH=/app \
            myapp:builder pytest tests

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Test SSH connection
        run: |
          ssh -v -o StrictHostKeyChecking=no \
            -o ConnectTimeout=15 \
            -p ${{ secrets.PORT }} \
            ${{ secrets.USER }}@${{ secrets.HOST }} \
            "echo 'SSH connection successful!'"

      - name: Deploy to remote server
        run: |
          # Передача образа со сжатием
          docker save myapp:final | gzip | ssh -o StrictHostKeyChecking=no \
            -o ConnectTimeout=60 \
            -p ${{ secrets.PORT }} \
            ${{ secrets.USER }}@${{ secrets.HOST }} \
            "gunzip | podman load && podman tag myapp:final myapp:final"

          # Перезапуск контейнера
          ssh -o StrictHostKeyChecking=no \
            -o ConnectTimeout=15 \
            -p ${{ secrets.PORT }} \
            ${{ secrets.USER }}@${{ secrets.HOST }} \
            "podman stop myapp || true
             podman rm myapp || true
             podman run -d --name myapp --network=host myapp:final"
